{"version":3,"sources":["modules/bubble/modules/Bubbles.js","modules/bubble/Bubble.js","modules/colour/Colour.js","App.js","serviceWorker.js","index.js"],"names":["Bubbles","_ref","bubbles","handleChange","bubbleClick","BubbleList","map","bubble","react_default","a","createElement","key","id","className","style","top","y","left","x","background","color","onClick","content","type","onChange","Bubble","state","e","inputBubbleId","target","currentInputValue","value","prevBubblesState","Object","toConsumableArray","_this","activeBubble","filter","inputUpdatedBubble","eachPrevBubble","find","updatedBubble","setState","handleClick","Math","random","pageX","pageY","props","colour","concat","preventDefault","currentTarget","classList","remove","bubbles2","lastChild","setTimeout","console","log","prevProps","prevState","this","after","undefined","newestInput","document","getElementById","select","parentNode","add","modules_Bubbles","Component","Colour","App","randomCSSColour","backgroundColor","updateColorChanger","firstChild","byte","floor","bubble_Bubble","colour_Colour","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11b6c20c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Bubbles = ({bubbles, handleChange, bubbleClick}) => {\r\n    const BubbleList = bubbles.map(\r\n        bubble => {\r\n        return(\r\n        <div key={bubble.id} className=\"bubble\" style={{top: bubble.y + 'px',left: bubble.x + 'px'}}>\r\n            <div style={{background: bubble.color}} onClick={bubbleClick}>\r\n            <p>{bubble.content}</p>\r\n            <input type=\"text\" onChange={handleChange} id={bubble.id}/>\r\n            </div>\r\n        </div> \r\n        )\r\n    })\r\n    \r\n    return (\r\n        <div>\r\n            {BubbleList}\r\n        </div>\r\n    )\r\n}\r\n    \r\n\r\n\r\n    export default Bubbles;","import React, { Component } from 'react';\r\nimport Bubbles from './modules/Bubbles';\r\nclass Bubble extends Component {\r\n    state = {\r\n        bubbles: []\r\n    }\r\n    handleChange = (e) => {\r\n        let inputBubbleId = e.target.id\r\n        let currentInputValue = e.target.value\r\n        let prevBubblesState = [...this.state.bubbles]\r\n        let activeBubble = this.state.bubbles.filter(bubble => {\r\n        return bubble.id == inputBubbleId\r\n        } )[0];\r\n        activeBubble.content = currentInputValue;\r\n        let inputUpdatedBubble = [activeBubble];\r\n        let bubbles = prevBubblesState.map(eachPrevBubble => \r\n            inputUpdatedBubble.find(updatedBubble =>\r\n                updatedBubble.id === eachPrevBubble.id\r\n            ) || eachPrevBubble\r\n        );\r\n        this.setState({\r\n        bubbles\r\n        })    \r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState) {\r\n        let inputBubbleId = prevState.bubbles\r\n        let newBubbleId = this.state.bubbles;\r\n        let after = this.state.bubbles.filter(bubble => {\r\n            let temp = prevState.bubbles.find(function ({id}) {return this.id == id;}, bubble)\r\n            if( temp == undefined) {\r\n                return true\r\n            }\r\n        })[0];\r\n        if(after !== undefined) {\r\n            let newestInput = document.getElementById(after.id);\r\n            newestInput.select();\r\n            newestInput.parentNode.classList.add('grow');\r\n        }\r\n        \r\n\r\n        }\r\n    \r\n    handleClick = (e) => {\r\n        if (e.target.className == \"bubbles\") {\r\n        let color = this.state.color;\r\n        let bubble = {id: Math.random(), content:'', x:e.pageX, y:e.pageY, color:this.props.colour};\r\n        let bubbles = [...this.state.bubbles, bubble];\r\n        this.setState({\r\n        bubbles\r\n        })\r\n    }\r\n    }\r\n\r\n    bubbleClick = (e) => {\r\n        e.preventDefault()\r\n            e.currentTarget.classList.remove(\"grow\")\r\n            let prevBubblesState = [...this.state.bubbles];\r\n            \r\n            let bubbles2 = prevBubblesState.filter(checkId);\r\n            setTimeout((e)=>{\r\n                this.setState({\r\n                    bubbles:bubbles2\r\n                 })\r\n            },200)\r\n            function checkId(id) {\r\n                return id.id != e.target.lastChild.id\r\n            }\r\n\r\n\r\n        console.log(\"bubble clicked\")\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n        <div className=\"bubbles\" onClick={this.handleClick}>\r\n            <Bubbles bubbles={this.state.bubbles} handleChange={this.handleChange} bubbleClick={this.bubbleClick}/>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n export default Bubble;","import React from 'react';\r\n\r\nconst Colour = ({ handleClick}) => {\r\n    \r\n    return (\r\n<div id=\"colour\">\r\n    <div onClick={handleClick} className=\"bounce\"/>\r\n</div>\r\n\r\n    )\r\n}\r\n\r\nexport default Colour;","import React, { Component } from 'react';\nimport './styles/App.css';\nimport Bubble from './modules/bubble/Bubble';\nimport Colour from './modules/colour/Colour';\n\nclass App extends Component {\n  componentWillMount() {\n    this.setState({\n      colour: this.randomCSSColour()\n    }) \n  }\n  componentDidMount() {\n    this.updateColorChanger();\n  }\n  componentDidUpdate() {\n    this.updateColorChanger();\n  }\n  handleClick = (e) => {\n    this.setState({\n      colour: this.randomCSSColour()\n    })   \n    e.target.style.backgroundColor = this.state.colour\n    e.target.classList.remove('bounce');\n  }\n  updateColorChanger = function(){\n    document.getElementById('colour').firstChild.style.backgroundColor = this.state.colour\n  }\n  randomCSSColour = () => {\n    const byte = () => Math.floor(Math.random() * 255);\n    return `rgb(${byte()},${byte()},${byte()})`;\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Bubble colour={this.state.colour}></Bubble>\n        <Colour handleClick={this.handleClick}></Colour>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}