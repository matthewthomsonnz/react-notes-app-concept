{"version":3,"sources":["modules/bubble/modules/Bubbles.js","modules/bubble/Bubble.js","modules/colour/Colour.js","App.js","serviceWorker.js","index.js"],"names":["Bubbles","_ref","bubbles","handleChange","bubbleClick","BubbleList","length","map","bubble","react_default","a","createElement","key","id","className","style","top","y","left","x","background","color","onClick","content","type","onChange","Bubble","state","e","inputBubbleId","target","currentInputValue","value","prevBubblesState","Object","toConsumableArray","_this","activeBubble","filter","inputUpdatedBubble","eachPrevBubble","find","updatedBubble","setState","handleClick","Math","random","pageX","pageY","props","colour","concat","preventDefault","currentTarget","classList","remove","bubbles2","lastChild","prevProps","prevState","this","after","undefined","newestInput","document","getElementById","select","parentNode","add","modules_Bubbles","Component","Colour","App","randomCSSColour","backgroundColor","updateColorChanger","firstChild","byte","floor","bubble_Bubble","colour_Colour","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1e3d82c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Bubbles = ({bubbles, handleChange, bubbleClick}) => {\r\n    const BubbleList =  bubbles.length ? bubbles.map(\r\n        bubble => {\r\n        return(\r\n        <div key={bubble.id} className=\"bubble\" style={{top: bubble.y + 'px',left: bubble.x + 'px'}}>\r\n            <div style={{background: bubble.color}} onClick={bubbleClick}>\r\n            <p>{bubble.content}</p>\r\n            <input type=\"text\" onChange={handleChange} id={bubble.id}/>\r\n            </div>\r\n        </div> \r\n        )\r\n    }) : (\r\n        <p className=\"message\">Click somewhere then start typing</p>\r\n    )\r\n    \r\n    return (\r\n        <div>\r\n            {BubbleList}\r\n        </div>\r\n    )\r\n}\r\n    \r\n    export default Bubbles;","import React, { Component } from 'react';\r\nimport Bubbles from './modules/Bubbles';\r\nclass Bubble extends Component {\r\n    state = {\r\n        bubbles: []\r\n    }\r\n    handleChange = (e) => {\r\n        let inputBubbleId = e.target.id\r\n        let currentInputValue = e.target.value\r\n        let prevBubblesState = [...this.state.bubbles]\r\n        let activeBubble = this.state.bubbles.filter(bubble => {\r\n        return bubble.id == inputBubbleId\r\n        } )[0];\r\n        activeBubble.content = currentInputValue;\r\n        let inputUpdatedBubble = [activeBubble];\r\n        let bubbles = prevBubblesState.map(eachPrevBubble => \r\n            inputUpdatedBubble.find(updatedBubble =>\r\n                updatedBubble.id === eachPrevBubble.id\r\n            ) || eachPrevBubble\r\n        );\r\n        this.setState({\r\n            bubbles\r\n        })    \r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState) {\r\n        let inputBubbleId = prevState.bubbles\r\n        let newBubbleId = this.state.bubbles;\r\n        let after = this.state.bubbles.filter(bubble => {\r\n            let temp = prevState.bubbles.find(function ({id}) {return this.id == id;}, bubble)\r\n            if( temp == undefined) {\r\n                return true\r\n            }\r\n        })[0];\r\n        if(after !== undefined) {\r\n            let newestInput = document.getElementById(after.id);\r\n            newestInput.select();\r\n            newestInput.parentNode.classList.add('grow');\r\n        }\r\n    }\r\n    \r\n    handleClick = (e) => {\r\n        if (e.target.className == \"bubbles\") {\r\n        let color = this.state.color;\r\n        let bubble = {id: Math.random(), content:'', x:e.pageX, y:e.pageY, color:this.props.colour};\r\n        let bubbles = [...this.state.bubbles, bubble];\r\n        this.setState({\r\n            bubbles\r\n        })\r\n        }\r\n    }\r\n    bubbleClick = (e) => {\r\n        e.preventDefault()\r\n        e.currentTarget.classList.remove(\"grow\")\r\n        let prevBubblesState = [...this.state.bubbles];\r\n        let bubbles2 = prevBubblesState.filter(checkId);\r\n        this.setState({\r\n            bubbles:bubbles2\r\n        })\r\n        function checkId(id) {\r\n            return id.id != e.target.lastChild.id\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n        <div className=\"bubbles\" onClick={this.handleClick}>\r\n            <Bubbles bubbles={this.state.bubbles} handleChange={this.handleChange} bubbleClick={this.bubbleClick}/>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n export default Bubble;","import React from 'react';\r\n\r\nconst Colour = ({ handleClick}) => {\r\n    \r\n    return (\r\n<div id=\"colour\">\r\n    <div onClick={handleClick} className=\"bounce\"/>\r\n</div>\r\n\r\n    )\r\n}\r\n\r\nexport default Colour;","import React, { Component } from 'react';\r\nimport './styles/App.css';\r\nimport Bubble from './modules/bubble/Bubble';\r\nimport Colour from './modules/colour/Colour';\r\n\r\nclass App extends Component {\r\n  componentWillMount() {\r\n    this.setState({\r\n      colour: this.randomCSSColour()\r\n    }) \r\n  }\r\n  componentDidMount() {\r\n    this.updateColorChanger();\r\n  }\r\n  componentDidUpdate() {\r\n    this.updateColorChanger();\r\n  }\r\n  handleClick = (e) => {\r\n    this.setState({\r\n      colour: this.randomCSSColour()\r\n    })   \r\n    e.target.style.backgroundColor = this.state.colour\r\n    e.target.classList.remove('bounce');\r\n  }\r\n  updateColorChanger = function(){\r\n    document.getElementById('colour').firstChild.style.backgroundColor = this.state.colour\r\n  }\r\n  randomCSSColour = () => {\r\n    const byte = () => Math.floor(Math.random() * 255);\r\n    return `rgb(${byte()},${byte()},${byte()})`;\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Bubble colour={this.state.colour}></Bubble>\r\n        <Colour handleClick={this.handleClick}></Colour>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}